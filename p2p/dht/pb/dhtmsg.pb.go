// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhtmsg.proto

package dhtmsg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolId int32

const (
	ProtocolId_PID_DHT ProtocolId = 0
	ProtocolId_PID_EXT ProtocolId = 255
)

var ProtocolId_name = map[int32]string{
	0:   "PID_DHT",
	255: "PID_EXT",
}
var ProtocolId_value = map[string]int32{
	"PID_DHT": 0,
	"PID_EXT": 255,
}

func (x ProtocolId) Enum() *ProtocolId {
	p := new(ProtocolId)
	*p = x
	return p
}
func (x ProtocolId) String() string {
	return proto.EnumName(ProtocolId_name, int32(x))
}
func (x *ProtocolId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolId_value, data, "ProtocolId")
	if err != nil {
		return err
	}
	*x = ProtocolId(value)
	return nil
}
func (ProtocolId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{0}
}

type DhtMessage_MessageType int32

const (
	DhtMessage_MID_HANDSHAKE       DhtMessage_MessageType = 0
	DhtMessage_MID_FINDNODE        DhtMessage_MessageType = 1
	DhtMessage_MID_NEIGHBORS       DhtMessage_MessageType = 2
	DhtMessage_MID_PUTVALUE        DhtMessage_MessageType = 3
	DhtMessage_MID_GETVALUE_REQ    DhtMessage_MessageType = 4
	DhtMessage_MID_GETVALUE_RSP    DhtMessage_MessageType = 5
	DhtMessage_MID_PUTPROVIDER     DhtMessage_MessageType = 6
	DhtMessage_MID_GETPROVIDER_REQ DhtMessage_MessageType = 7
	DhtMessage_MID_GETPROVIDER_RSP DhtMessage_MessageType = 8
	DhtMessage_MID_PING            DhtMessage_MessageType = 9
	DhtMessage_MID_PONG            DhtMessage_MessageType = 10
)

var DhtMessage_MessageType_name = map[int32]string{
	0:  "MID_HANDSHAKE",
	1:  "MID_FINDNODE",
	2:  "MID_NEIGHBORS",
	3:  "MID_PUTVALUE",
	4:  "MID_GETVALUE_REQ",
	5:  "MID_GETVALUE_RSP",
	6:  "MID_PUTPROVIDER",
	7:  "MID_GETPROVIDER_REQ",
	8:  "MID_GETPROVIDER_RSP",
	9:  "MID_PING",
	10: "MID_PONG",
}
var DhtMessage_MessageType_value = map[string]int32{
	"MID_HANDSHAKE":       0,
	"MID_FINDNODE":        1,
	"MID_NEIGHBORS":       2,
	"MID_PUTVALUE":        3,
	"MID_GETVALUE_REQ":    4,
	"MID_GETVALUE_RSP":    5,
	"MID_PUTPROVIDER":     6,
	"MID_GETPROVIDER_REQ": 7,
	"MID_GETPROVIDER_RSP": 8,
	"MID_PING":            9,
	"MID_PONG":            10,
}

func (x DhtMessage_MessageType) Enum() *DhtMessage_MessageType {
	p := new(DhtMessage_MessageType)
	*p = x
	return p
}
func (x DhtMessage_MessageType) String() string {
	return proto.EnumName(DhtMessage_MessageType_name, int32(x))
}
func (x *DhtMessage_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DhtMessage_MessageType_value, data, "DhtMessage_MessageType")
	if err != nil {
		return err
	}
	*x = DhtMessage_MessageType(value)
	return nil
}
func (DhtMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 0}
}

type DhtMessage_ConnectionType int32

const (
	DhtMessage_CONT_NO     DhtMessage_ConnectionType = 0
	DhtMessage_CONT_YES    DhtMessage_ConnectionType = 1
	DhtMessage_CONT_MAY    DhtMessage_ConnectionType = 2
	DhtMessage_CONT_FAILED DhtMessage_ConnectionType = 3
)

var DhtMessage_ConnectionType_name = map[int32]string{
	0: "CONT_NO",
	1: "CONT_YES",
	2: "CONT_MAY",
	3: "CONT_FAILED",
}
var DhtMessage_ConnectionType_value = map[string]int32{
	"CONT_NO":     0,
	"CONT_YES":    1,
	"CONT_MAY":    2,
	"CONT_FAILED": 3,
}

func (x DhtMessage_ConnectionType) Enum() *DhtMessage_ConnectionType {
	p := new(DhtMessage_ConnectionType)
	*p = x
	return p
}
func (x DhtMessage_ConnectionType) String() string {
	return proto.EnumName(DhtMessage_ConnectionType_name, int32(x))
}
func (x *DhtMessage_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DhtMessage_ConnectionType_value, data, "DhtMessage_ConnectionType")
	if err != nil {
		return err
	}
	*x = DhtMessage_ConnectionType(value)
	return nil
}
func (DhtMessage_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 1}
}

type DhtPackage struct {
	Pid                  *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=dhtmsg.pb.ProtocolId" json:"Pid,omitempty"`
	PayloadLength        *uint32     `protobuf:"varint,2,req,name=PayloadLength" json:"PayloadLength,omitempty"`
	Payload              []byte      `protobuf:"bytes,3,opt,name=Payload" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DhtPackage) Reset()         { *m = DhtPackage{} }
func (m *DhtPackage) String() string { return proto.CompactTextString(m) }
func (*DhtPackage) ProtoMessage()    {}
func (*DhtPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{0}
}
func (m *DhtPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtPackage.Merge(dst, src)
}
func (m *DhtPackage) XXX_Size() int {
	return m.Size()
}
func (m *DhtPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtPackage.DiscardUnknown(m)
}

var xxx_messageInfo_DhtPackage proto.InternalMessageInfo

func (m *DhtPackage) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_DHT
}

func (m *DhtPackage) GetPayloadLength() uint32 {
	if m != nil && m.PayloadLength != nil {
		return *m.PayloadLength
	}
	return 0
}

func (m *DhtPackage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type DhtMessage struct {
	MsgType              *DhtMessage_MessageType    `protobuf:"varint,1,req,name=msgType,enum=dhtmsg.pb.DhtMessage_MessageType" json:"msgType,omitempty"`
	Handshake            *DhtMessage_Handshake      `protobuf:"bytes,2,opt,name=handshake" json:"handshake,omitempty"`
	FindNode             *DhtMessage_FindNode       `protobuf:"bytes,3,opt,name=findNode" json:"findNode,omitempty"`
	Neighbors            *DhtMessage_Neighbors      `protobuf:"bytes,4,opt,name=neighbors" json:"neighbors,omitempty"`
	PutValue             *DhtMessage_PutValue       `protobuf:"bytes,5,opt,name=putValue" json:"putValue,omitempty"`
	GetValueReq          *DhtMessage_GetValueReq    `protobuf:"bytes,6,opt,name=getValueReq" json:"getValueReq,omitempty"`
	GetValueRsp          *DhtMessage_GetValueRsp    `protobuf:"bytes,7,opt,name=getValueRsp" json:"getValueRsp,omitempty"`
	PutProvider          *DhtMessage_PutProvider    `protobuf:"bytes,8,opt,name=putProvider" json:"putProvider,omitempty"`
	GetProviderReq       *DhtMessage_GetProviderReq `protobuf:"bytes,9,opt,name=getProviderReq" json:"getProviderReq,omitempty"`
	GetProviderRsp       *DhtMessage_GetProviderRsp `protobuf:"bytes,10,opt,name=getProviderRsp" json:"getProviderRsp,omitempty"`
	Ping                 *DhtMessage_Ping           `protobuf:"bytes,11,opt,name=ping" json:"ping,omitempty"`
	Pong                 *DhtMessage_Pong           `protobuf:"bytes,12,opt,name=pong" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DhtMessage) Reset()         { *m = DhtMessage{} }
func (m *DhtMessage) String() string { return proto.CompactTextString(m) }
func (*DhtMessage) ProtoMessage()    {}
func (*DhtMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1}
}
func (m *DhtMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage.Merge(dst, src)
}
func (m *DhtMessage) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage proto.InternalMessageInfo

func (m *DhtMessage) GetMsgType() DhtMessage_MessageType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return DhtMessage_MID_HANDSHAKE
}

func (m *DhtMessage) GetHandshake() *DhtMessage_Handshake {
	if m != nil {
		return m.Handshake
	}
	return nil
}

func (m *DhtMessage) GetFindNode() *DhtMessage_FindNode {
	if m != nil {
		return m.FindNode
	}
	return nil
}

func (m *DhtMessage) GetNeighbors() *DhtMessage_Neighbors {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *DhtMessage) GetPutValue() *DhtMessage_PutValue {
	if m != nil {
		return m.PutValue
	}
	return nil
}

func (m *DhtMessage) GetGetValueReq() *DhtMessage_GetValueReq {
	if m != nil {
		return m.GetValueReq
	}
	return nil
}

func (m *DhtMessage) GetGetValueRsp() *DhtMessage_GetValueRsp {
	if m != nil {
		return m.GetValueRsp
	}
	return nil
}

func (m *DhtMessage) GetPutProvider() *DhtMessage_PutProvider {
	if m != nil {
		return m.PutProvider
	}
	return nil
}

func (m *DhtMessage) GetGetProviderReq() *DhtMessage_GetProviderReq {
	if m != nil {
		return m.GetProviderReq
	}
	return nil
}

func (m *DhtMessage) GetGetProviderRsp() *DhtMessage_GetProviderRsp {
	if m != nil {
		return m.GetProviderRsp
	}
	return nil
}

func (m *DhtMessage) GetPing() *DhtMessage_Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *DhtMessage) GetPong() *DhtMessage_Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

type DhtMessage_Node struct {
	IP                   []byte                     `protobuf:"bytes,1,req,name=IP" json:"IP,omitempty"`
	UDP                  *uint32                    `protobuf:"varint,2,req,name=UDP" json:"UDP,omitempty"`
	TCP                  *uint32                    `protobuf:"varint,3,req,name=TCP" json:"TCP,omitempty"`
	NodeId               []byte                     `protobuf:"bytes,4,req,name=NodeId" json:"NodeId,omitempty"`
	ConnType             *DhtMessage_ConnectionType `protobuf:"varint,5,req,name=ConnType,enum=dhtmsg.pb.DhtMessage_ConnectionType" json:"ConnType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DhtMessage_Node) Reset()         { *m = DhtMessage_Node{} }
func (m *DhtMessage_Node) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Node) ProtoMessage()    {}
func (*DhtMessage_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 0}
}
func (m *DhtMessage_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Node.Merge(dst, src)
}
func (m *DhtMessage_Node) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Node.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Node proto.InternalMessageInfo

func (m *DhtMessage_Node) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *DhtMessage_Node) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *DhtMessage_Node) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *DhtMessage_Node) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *DhtMessage_Node) GetConnType() DhtMessage_ConnectionType {
	if m != nil && m.ConnType != nil {
		return *m.ConnType
	}
	return DhtMessage_CONT_NO
}

type DhtMessage_Value struct {
	Key                  []byte   `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Val                  []byte   `protobuf:"bytes,2,req,name=Val" json:"Val,omitempty"`
	Extra                []byte   `protobuf:"bytes,3,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DhtMessage_Value) Reset()         { *m = DhtMessage_Value{} }
func (m *DhtMessage_Value) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Value) ProtoMessage()    {}
func (*DhtMessage_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 1}
}
func (m *DhtMessage_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Value.Merge(dst, src)
}
func (m *DhtMessage_Value) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Value.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Value proto.InternalMessageInfo

func (m *DhtMessage_Value) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_Value) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *DhtMessage_Value) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Provider struct {
	Key                  []byte             `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Nodes                []*DhtMessage_Node `protobuf:"bytes,2,rep,name=Nodes" json:"Nodes,omitempty"`
	Extra                []byte             `protobuf:"bytes,3,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DhtMessage_Provider) Reset()         { *m = DhtMessage_Provider{} }
func (m *DhtMessage_Provider) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Provider) ProtoMessage()    {}
func (*DhtMessage_Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 2}
}
func (m *DhtMessage_Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Provider.Merge(dst, src)
}
func (m *DhtMessage_Provider) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Provider proto.InternalMessageInfo

func (m *DhtMessage_Provider) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_Provider) GetNodes() []*DhtMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DhtMessage_Provider) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Protocol struct {
	Pid                  *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=dhtmsg.pb.ProtocolId" json:"Pid,omitempty"`
	Ver                  []byte      `protobuf:"bytes,2,req,name=Ver" json:"Ver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DhtMessage_Protocol) Reset()         { *m = DhtMessage_Protocol{} }
func (m *DhtMessage_Protocol) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Protocol) ProtoMessage()    {}
func (*DhtMessage_Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 3}
}
func (m *DhtMessage_Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Protocol.Merge(dst, src)
}
func (m *DhtMessage_Protocol) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Protocol proto.InternalMessageInfo

func (m *DhtMessage_Protocol) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_DHT
}

func (m *DhtMessage_Protocol) GetVer() []byte {
	if m != nil {
		return m.Ver
	}
	return nil
}

type DhtMessage_Handshake struct {
	ChainId              *uint32                `protobuf:"varint,1,req,name=ChainId" json:"ChainId,omitempty"`
	Dir                  *int32                 `protobuf:"varint,2,req,name=Dir" json:"Dir,omitempty"`
	NodeId               []byte                 `protobuf:"bytes,3,req,name=NodeId" json:"NodeId,omitempty"`
	IP                   []byte                 `protobuf:"bytes,4,req,name=IP" json:"IP,omitempty"`
	UDP                  *uint32                `protobuf:"varint,5,req,name=UDP" json:"UDP,omitempty"`
	TCP                  *uint32                `protobuf:"varint,6,req,name=TCP" json:"TCP,omitempty"`
	ProtoNum             *uint32                `protobuf:"varint,7,req,name=ProtoNum" json:"ProtoNum,omitempty"`
	Protocols            []*DhtMessage_Protocol `protobuf:"bytes,8,rep,name=Protocols" json:"Protocols,omitempty"`
	Id                   *uint64                `protobuf:"varint,9,req,name=Id" json:"Id,omitempty"`
	Extra                []byte                 `protobuf:"bytes,10,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DhtMessage_Handshake) Reset()         { *m = DhtMessage_Handshake{} }
func (m *DhtMessage_Handshake) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Handshake) ProtoMessage()    {}
func (*DhtMessage_Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 4}
}
func (m *DhtMessage_Handshake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Handshake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Handshake.Merge(dst, src)
}
func (m *DhtMessage_Handshake) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Handshake proto.InternalMessageInfo

func (m *DhtMessage_Handshake) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *DhtMessage_Handshake) GetDir() int32 {
	if m != nil && m.Dir != nil {
		return *m.Dir
	}
	return 0
}

func (m *DhtMessage_Handshake) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *DhtMessage_Handshake) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *DhtMessage_Handshake) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *DhtMessage_Handshake) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *DhtMessage_Handshake) GetProtoNum() uint32 {
	if m != nil && m.ProtoNum != nil {
		return *m.ProtoNum
	}
	return 0
}

func (m *DhtMessage_Handshake) GetProtocols() []*DhtMessage_Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *DhtMessage_Handshake) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_Handshake) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_FindNode struct {
	From                 *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Target               []byte           `protobuf:"bytes,3,req,name=Target" json:"Target,omitempty"`
	Id                   *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DhtMessage_FindNode) Reset()         { *m = DhtMessage_FindNode{} }
func (m *DhtMessage_FindNode) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_FindNode) ProtoMessage()    {}
func (*DhtMessage_FindNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 5}
}
func (m *DhtMessage_FindNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_FindNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_FindNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_FindNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_FindNode.Merge(dst, src)
}
func (m *DhtMessage_FindNode) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_FindNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_FindNode.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_FindNode proto.InternalMessageInfo

func (m *DhtMessage_FindNode) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_FindNode) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_FindNode) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *DhtMessage_FindNode) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_FindNode) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Neighbors struct {
	From                 *DhtMessage_Node   `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node   `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Nodes                []*DhtMessage_Node `protobuf:"bytes,3,rep,name=Nodes" json:"Nodes,omitempty"`
	Id                   *uint64            `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte             `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DhtMessage_Neighbors) Reset()         { *m = DhtMessage_Neighbors{} }
func (m *DhtMessage_Neighbors) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Neighbors) ProtoMessage()    {}
func (*DhtMessage_Neighbors) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 6}
}
func (m *DhtMessage_Neighbors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Neighbors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Neighbors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Neighbors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Neighbors.Merge(dst, src)
}
func (m *DhtMessage_Neighbors) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Neighbors) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Neighbors.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Neighbors proto.InternalMessageInfo

func (m *DhtMessage_Neighbors) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetNodes() []*DhtMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_Neighbors) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_PutValue struct {
	From                 *DhtMessage_Node    `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node    `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Values               []*DhtMessage_Value `protobuf:"bytes,3,rep,name=Values" json:"Values,omitempty"`
	Id                   *uint64             `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte              `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DhtMessage_PutValue) Reset()         { *m = DhtMessage_PutValue{} }
func (m *DhtMessage_PutValue) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_PutValue) ProtoMessage()    {}
func (*DhtMessage_PutValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 7}
}
func (m *DhtMessage_PutValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_PutValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_PutValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_PutValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_PutValue.Merge(dst, src)
}
func (m *DhtMessage_PutValue) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_PutValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_PutValue.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_PutValue proto.InternalMessageInfo

func (m *DhtMessage_PutValue) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_PutValue) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_PutValue) GetValues() []*DhtMessage_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *DhtMessage_PutValue) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_PutValue) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetValueReq struct {
	From                 *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Key                  []byte           `protobuf:"bytes,3,req,name=Key" json:"Key,omitempty"`
	Id                   *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DhtMessage_GetValueReq) Reset()         { *m = DhtMessage_GetValueReq{} }
func (m *DhtMessage_GetValueReq) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetValueReq) ProtoMessage()    {}
func (*DhtMessage_GetValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 8}
}
func (m *DhtMessage_GetValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_GetValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_GetValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_GetValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_GetValueReq.Merge(dst, src)
}
func (m *DhtMessage_GetValueReq) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_GetValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_GetValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_GetValueReq proto.InternalMessageInfo

func (m *DhtMessage_GetValueReq) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetValueReq) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetValueRsp struct {
	From                 *DhtMessage_Node  `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node  `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Value                *DhtMessage_Value `protobuf:"bytes,3,opt,name=Value" json:"Value,omitempty"`
	Nodes                *DhtMessage_Node  `protobuf:"bytes,4,opt,name=Nodes" json:"Nodes,omitempty"`
	Id                   *uint64           `protobuf:"varint,5,req,name=Id" json:"Id,omitempty"`
	Extra                []byte            `protobuf:"bytes,6,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DhtMessage_GetValueRsp) Reset()         { *m = DhtMessage_GetValueRsp{} }
func (m *DhtMessage_GetValueRsp) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetValueRsp) ProtoMessage()    {}
func (*DhtMessage_GetValueRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 9}
}
func (m *DhtMessage_GetValueRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_GetValueRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_GetValueRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_GetValueRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_GetValueRsp.Merge(dst, src)
}
func (m *DhtMessage_GetValueRsp) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_GetValueRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_GetValueRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_GetValueRsp proto.InternalMessageInfo

func (m *DhtMessage_GetValueRsp) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetValue() *DhtMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetNodes() *DhtMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetValueRsp) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_PutProvider struct {
	From                 *DhtMessage_Node     `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node     `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Provider             *DhtMessage_Provider `protobuf:"bytes,3,req,name=Provider" json:"Provider,omitempty"`
	Id                   *uint64              `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte               `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DhtMessage_PutProvider) Reset()         { *m = DhtMessage_PutProvider{} }
func (m *DhtMessage_PutProvider) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_PutProvider) ProtoMessage()    {}
func (*DhtMessage_PutProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 10}
}
func (m *DhtMessage_PutProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_PutProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_PutProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_PutProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_PutProvider.Merge(dst, src)
}
func (m *DhtMessage_PutProvider) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_PutProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_PutProvider.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_PutProvider proto.InternalMessageInfo

func (m *DhtMessage_PutProvider) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetProvider() *DhtMessage_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_PutProvider) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetProviderReq struct {
	From                 *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Key                  []byte           `protobuf:"bytes,3,req,name=Key" json:"Key,omitempty"`
	Id                   *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra                []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DhtMessage_GetProviderReq) Reset()         { *m = DhtMessage_GetProviderReq{} }
func (m *DhtMessage_GetProviderReq) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetProviderReq) ProtoMessage()    {}
func (*DhtMessage_GetProviderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 11}
}
func (m *DhtMessage_GetProviderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_GetProviderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_GetProviderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_GetProviderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_GetProviderReq.Merge(dst, src)
}
func (m *DhtMessage_GetProviderReq) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_GetProviderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_GetProviderReq.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_GetProviderReq proto.InternalMessageInfo

func (m *DhtMessage_GetProviderReq) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetProviderReq) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetProviderRsp struct {
	From                 *DhtMessage_Node     `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node     `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Provider             *DhtMessage_Provider `protobuf:"bytes,3,req,name=Provider" json:"Provider,omitempty"`
	Key                  []byte               `protobuf:"bytes,4,req,name=Key" json:"Key,omitempty"`
	Nodes                []*DhtMessage_Node   `protobuf:"bytes,5,rep,name=Nodes" json:"Nodes,omitempty"`
	Id                   *uint64              `protobuf:"varint,6,req,name=Id" json:"Id,omitempty"`
	Extra                []byte               `protobuf:"bytes,7,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DhtMessage_GetProviderRsp) Reset()         { *m = DhtMessage_GetProviderRsp{} }
func (m *DhtMessage_GetProviderRsp) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetProviderRsp) ProtoMessage()    {}
func (*DhtMessage_GetProviderRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 12}
}
func (m *DhtMessage_GetProviderRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_GetProviderRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_GetProviderRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_GetProviderRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_GetProviderRsp.Merge(dst, src)
}
func (m *DhtMessage_GetProviderRsp) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_GetProviderRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_GetProviderRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_GetProviderRsp proto.InternalMessageInfo

func (m *DhtMessage_GetProviderRsp) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetProvider() *DhtMessage_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetNodes() []*DhtMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetProviderRsp) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Ping struct {
	From                 *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Seq                  *uint64          `protobuf:"varint,3,req,name=Seq" json:"Seq,omitempty"`
	Extra                []byte           `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DhtMessage_Ping) Reset()         { *m = DhtMessage_Ping{} }
func (m *DhtMessage_Ping) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Ping) ProtoMessage()    {}
func (*DhtMessage_Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 13}
}
func (m *DhtMessage_Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Ping.Merge(dst, src)
}
func (m *DhtMessage_Ping) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Ping proto.InternalMessageInfo

func (m *DhtMessage_Ping) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Ping) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Ping) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *DhtMessage_Ping) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Pong struct {
	From                 *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To                   *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Seq                  *uint64          `protobuf:"varint,3,req,name=Seq" json:"Seq,omitempty"`
	Extra                []byte           `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DhtMessage_Pong) Reset()         { *m = DhtMessage_Pong{} }
func (m *DhtMessage_Pong) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_Pong) ProtoMessage()    {}
func (*DhtMessage_Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{1, 14}
}
func (m *DhtMessage_Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtMessage_Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtMessage_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtMessage_Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtMessage_Pong.Merge(dst, src)
}
func (m *DhtMessage_Pong) XXX_Size() int {
	return m.Size()
}
func (m *DhtMessage_Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtMessage_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_DhtMessage_Pong proto.InternalMessageInfo

func (m *DhtMessage_Pong) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Pong) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Pong) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *DhtMessage_Pong) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtRecord struct {
	Key                  []byte   `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Extra                []byte   `protobuf:"bytes,3,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DhtRecord) Reset()         { *m = DhtRecord{} }
func (m *DhtRecord) String() string { return proto.CompactTextString(m) }
func (*DhtRecord) ProtoMessage()    {}
func (*DhtRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{2}
}
func (m *DhtRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtRecord.Merge(dst, src)
}
func (m *DhtRecord) XXX_Size() int {
	return m.Size()
}
func (m *DhtRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DhtRecord proto.InternalMessageInfo

func (m *DhtRecord) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtRecord) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DhtRecord) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtProviderRecord struct {
	Key                  []byte                        `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Providers            []*DhtProviderRecord_Provider `protobuf:"bytes,2,rep,name=providers" json:"providers,omitempty"`
	Extra                []byte                        `protobuf:"bytes,3,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DhtProviderRecord) Reset()         { *m = DhtProviderRecord{} }
func (m *DhtProviderRecord) String() string { return proto.CompactTextString(m) }
func (*DhtProviderRecord) ProtoMessage()    {}
func (*DhtProviderRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{3}
}
func (m *DhtProviderRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtProviderRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtProviderRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtProviderRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtProviderRecord.Merge(dst, src)
}
func (m *DhtProviderRecord) XXX_Size() int {
	return m.Size()
}
func (m *DhtProviderRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtProviderRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DhtProviderRecord proto.InternalMessageInfo

func (m *DhtProviderRecord) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtProviderRecord) GetProviders() []*DhtProviderRecord_Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *DhtProviderRecord) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtProviderRecord_Node struct {
	IP                   []byte   `protobuf:"bytes,1,req,name=IP" json:"IP,omitempty"`
	UDP                  *uint32  `protobuf:"varint,2,req,name=UDP" json:"UDP,omitempty"`
	TCP                  *uint32  `protobuf:"varint,3,req,name=TCP" json:"TCP,omitempty"`
	NodeId               []byte   `protobuf:"bytes,4,req,name=NodeId" json:"NodeId,omitempty"`
	Extra                []byte   `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DhtProviderRecord_Node) Reset()         { *m = DhtProviderRecord_Node{} }
func (m *DhtProviderRecord_Node) String() string { return proto.CompactTextString(m) }
func (*DhtProviderRecord_Node) ProtoMessage()    {}
func (*DhtProviderRecord_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{3, 0}
}
func (m *DhtProviderRecord_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtProviderRecord_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtProviderRecord_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtProviderRecord_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtProviderRecord_Node.Merge(dst, src)
}
func (m *DhtProviderRecord_Node) XXX_Size() int {
	return m.Size()
}
func (m *DhtProviderRecord_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtProviderRecord_Node.DiscardUnknown(m)
}

var xxx_messageInfo_DhtProviderRecord_Node proto.InternalMessageInfo

func (m *DhtProviderRecord_Node) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *DhtProviderRecord_Node) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *DhtProviderRecord_Node) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *DhtProviderRecord_Node) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *DhtProviderRecord_Node) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtProviderRecord_Provider struct {
	Node                 *DhtProviderRecord_Node `protobuf:"bytes,1,req,name=Node" json:"Node,omitempty"`
	Extra                []byte                  `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DhtProviderRecord_Provider) Reset()         { *m = DhtProviderRecord_Provider{} }
func (m *DhtProviderRecord_Provider) String() string { return proto.CompactTextString(m) }
func (*DhtProviderRecord_Provider) ProtoMessage()    {}
func (*DhtProviderRecord_Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhtmsg_b415edf7a3c082b7, []int{3, 1}
}
func (m *DhtProviderRecord_Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DhtProviderRecord_Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DhtProviderRecord_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DhtProviderRecord_Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhtProviderRecord_Provider.Merge(dst, src)
}
func (m *DhtProviderRecord_Provider) XXX_Size() int {
	return m.Size()
}
func (m *DhtProviderRecord_Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_DhtProviderRecord_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_DhtProviderRecord_Provider proto.InternalMessageInfo

func (m *DhtProviderRecord_Provider) GetNode() *DhtProviderRecord_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *DhtProviderRecord_Provider) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*DhtPackage)(nil), "dhtmsg.pb.DhtPackage")
	proto.RegisterType((*DhtMessage)(nil), "dhtmsg.pb.DhtMessage")
	proto.RegisterType((*DhtMessage_Node)(nil), "dhtmsg.pb.DhtMessage.Node")
	proto.RegisterType((*DhtMessage_Value)(nil), "dhtmsg.pb.DhtMessage.Value")
	proto.RegisterType((*DhtMessage_Provider)(nil), "dhtmsg.pb.DhtMessage.Provider")
	proto.RegisterType((*DhtMessage_Protocol)(nil), "dhtmsg.pb.DhtMessage.Protocol")
	proto.RegisterType((*DhtMessage_Handshake)(nil), "dhtmsg.pb.DhtMessage.Handshake")
	proto.RegisterType((*DhtMessage_FindNode)(nil), "dhtmsg.pb.DhtMessage.FindNode")
	proto.RegisterType((*DhtMessage_Neighbors)(nil), "dhtmsg.pb.DhtMessage.Neighbors")
	proto.RegisterType((*DhtMessage_PutValue)(nil), "dhtmsg.pb.DhtMessage.PutValue")
	proto.RegisterType((*DhtMessage_GetValueReq)(nil), "dhtmsg.pb.DhtMessage.GetValueReq")
	proto.RegisterType((*DhtMessage_GetValueRsp)(nil), "dhtmsg.pb.DhtMessage.GetValueRsp")
	proto.RegisterType((*DhtMessage_PutProvider)(nil), "dhtmsg.pb.DhtMessage.PutProvider")
	proto.RegisterType((*DhtMessage_GetProviderReq)(nil), "dhtmsg.pb.DhtMessage.GetProviderReq")
	proto.RegisterType((*DhtMessage_GetProviderRsp)(nil), "dhtmsg.pb.DhtMessage.GetProviderRsp")
	proto.RegisterType((*DhtMessage_Ping)(nil), "dhtmsg.pb.DhtMessage.Ping")
	proto.RegisterType((*DhtMessage_Pong)(nil), "dhtmsg.pb.DhtMessage.Pong")
	proto.RegisterType((*DhtRecord)(nil), "dhtmsg.pb.DhtRecord")
	proto.RegisterType((*DhtProviderRecord)(nil), "dhtmsg.pb.DhtProviderRecord")
	proto.RegisterType((*DhtProviderRecord_Node)(nil), "dhtmsg.pb.DhtProviderRecord.Node")
	proto.RegisterType((*DhtProviderRecord_Provider)(nil), "dhtmsg.pb.DhtProviderRecord.Provider")
	proto.RegisterEnum("dhtmsg.pb.ProtocolId", ProtocolId_name, ProtocolId_value)
	proto.RegisterEnum("dhtmsg.pb.DhtMessage_MessageType", DhtMessage_MessageType_name, DhtMessage_MessageType_value)
	proto.RegisterEnum("dhtmsg.pb.DhtMessage_ConnectionType", DhtMessage_ConnectionType_name, DhtMessage_ConnectionType_value)
}
func (m *DhtPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Pid))
	}
	if m.PayloadLength == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.PayloadLength))
	}
	if m.Payload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgType == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.MsgType))
	}
	if m.Handshake != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Handshake.Size()))
		n1, err := m.Handshake.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FindNode != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.FindNode.Size()))
		n2, err := m.FindNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Neighbors != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Neighbors.Size()))
		n3, err := m.Neighbors.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.PutValue != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.PutValue.Size()))
		n4, err := m.PutValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GetValueReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetValueReq.Size()))
		n5, err := m.GetValueReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.GetValueRsp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetValueRsp.Size()))
		n6, err := m.GetValueRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PutProvider != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.PutProvider.Size()))
		n7, err := m.PutProvider.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GetProviderReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetProviderReq.Size()))
		n8, err := m.GetProviderReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.GetProviderRsp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetProviderRsp.Size()))
		n9, err := m.GetProviderRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Ping != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Ping.Size()))
		n10, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Pong != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Pong.Size()))
		n11, err := m.Pong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.NodeId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.ConnType == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.ConnType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Val == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	if m.Extra != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Provider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Extra != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Protocol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Pid))
	}
	if m.Ver == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Ver)))
		i += copy(dAtA[i:], m.Ver)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Handshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Handshake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.ChainId))
	}
	if m.Dir == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Dir))
	}
	if m.NodeId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.IP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.ProtoNum == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.ProtoNum))
	}
	if len(m.Protocols) > 0 {
		for _, msg := range m.Protocols {
			dAtA[i] = 0x42
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_FindNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_FindNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n12, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n13, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Target == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Neighbors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Neighbors) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n14, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n15, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_PutValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_PutValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n16, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n17, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetValueReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n18, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n19, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetValueRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetValueRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n20, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n21, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Value != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Value.Size()))
		n22, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Nodes != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Nodes.Size()))
		n23, err := m.Nodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_PutProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_PutProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n24, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n25, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Provider == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Provider.Size()))
		n26, err := m.Provider.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetProviderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetProviderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n27, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n28, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetProviderRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetProviderRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n29, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n30, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Provider == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Provider.Size()))
		n31, err := m.Provider.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n32, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n33, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Seq == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Seq))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n34, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.To == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n35, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Seq == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Seq))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Extra != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtProviderRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtProviderRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Providers) > 0 {
		for _, msg := range m.Providers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Extra != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtProviderRecord_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtProviderRecord_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.NodeId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtProviderRecord_Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtProviderRecord_Provider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Node.Size()))
		n36, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Extra != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDhtmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DhtPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != nil {
		n += 1 + sovDhtmsg(uint64(*m.Pid))
	}
	if m.PayloadLength != nil {
		n += 1 + sovDhtmsg(uint64(*m.PayloadLength))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != nil {
		n += 1 + sovDhtmsg(uint64(*m.MsgType))
	}
	if m.Handshake != nil {
		l = m.Handshake.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.FindNode != nil {
		l = m.FindNode.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Neighbors != nil {
		l = m.Neighbors.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.PutValue != nil {
		l = m.PutValue.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetValueReq != nil {
		l = m.GetValueReq.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetValueRsp != nil {
		l = m.GetValueRsp.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.PutProvider != nil {
		l = m.PutProvider.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetProviderReq != nil {
		l = m.GetProviderReq.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetProviderRsp != nil {
		l = m.GetProviderRsp.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovDhtmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovDhtmsg(uint64(*m.TCP))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.ConnType != nil {
		n += 1 + sovDhtmsg(uint64(*m.ConnType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != nil {
		n += 1 + sovDhtmsg(uint64(*m.Pid))
	}
	if m.Ver != nil {
		l = len(m.Ver)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Handshake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != nil {
		n += 1 + sovDhtmsg(uint64(*m.ChainId))
	}
	if m.Dir != nil {
		n += 1 + sovDhtmsg(uint64(*m.Dir))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovDhtmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovDhtmsg(uint64(*m.TCP))
	}
	if m.ProtoNum != nil {
		n += 1 + sovDhtmsg(uint64(*m.ProtoNum))
	}
	if len(m.Protocols) > 0 {
		for _, e := range m.Protocols {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_FindNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Target != nil {
		l = len(m.Target)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Neighbors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_PutValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetValueRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Nodes != nil {
		l = m.Nodes.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_PutProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetProviderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetProviderRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Seq != nil {
		n += 1 + sovDhtmsg(uint64(*m.Seq))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Seq != nil {
		n += 1 + sovDhtmsg(uint64(*m.Seq))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtProviderRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtProviderRecord_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovDhtmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovDhtmsg(uint64(*m.TCP))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtProviderRecord_Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDhtmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDhtmsg(x uint64) (n int) {
	return sovDhtmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DhtPackage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DhtPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DhtPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v ProtocolId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ProtocolId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadLength", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayloadLength = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DhtMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DhtMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v DhtMessage_MessageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DhtMessage_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handshake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Handshake == nil {
				m.Handshake = &DhtMessage_Handshake{}
			}
			if err := m.Handshake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindNode == nil {
				m.FindNode = &DhtMessage_FindNode{}
			}
			if err := m.FindNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbors == nil {
				m.Neighbors = &DhtMessage_Neighbors{}
			}
			if err := m.Neighbors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutValue == nil {
				m.PutValue = &DhtMessage_PutValue{}
			}
			if err := m.PutValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetValueReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetValueReq == nil {
				m.GetValueReq = &DhtMessage_GetValueReq{}
			}
			if err := m.GetValueReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetValueRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetValueRsp == nil {
				m.GetValueRsp = &DhtMessage_GetValueRsp{}
			}
			if err := m.GetValueRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutProvider == nil {
				m.PutProvider = &DhtMessage_PutProvider{}
			}
			if err := m.PutProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetProviderReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetProviderReq == nil {
				m.GetProviderReq = &DhtMessage_GetProviderReq{}
			}
			if err := m.GetProviderReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetProviderRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetProviderRsp == nil {
				m.GetProviderRsp = &DhtMessage_GetProviderRsp{}
			}
			if err := m.GetProviderRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &DhtMessage_Ping{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pong == nil {
				m.Pong = &DhtMessage_Pong{}
			}
			if err := m.Pong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Node) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnType", wireType)
			}
			var v DhtMessage_ConnectionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DhtMessage_ConnectionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnType = &v
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Value) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Provider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DhtMessage_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Protocol) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v ProtocolId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ProtocolId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = append(m.Ver[:0], dAtA[iNdEx:postIndex]...)
			if m.Ver == nil {
				m.Ver = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Handshake) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dir = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtoNum = &v
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, &DhtMessage_Protocol{})
			if err := m.Protocols[len(m.Protocols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000080)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_FindNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Neighbors) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Neighbors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Neighbors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DhtMessage_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_PutValue) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DhtMessage_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetValueReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetValueRsp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &DhtMessage_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = &DhtMessage_Node{}
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_PutProvider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &DhtMessage_Provider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetProviderReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProviderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProviderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetProviderRsp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProviderRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProviderRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &DhtMessage_Provider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DhtMessage_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seq = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seq = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DhtRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DhtRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtProviderRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DhtProviderRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DhtProviderRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &DhtProviderRecord_Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtProviderRecord_Node) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtProviderRecord_Provider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &DhtProviderRecord_Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDhtmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDhtmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDhtmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDhtmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDhtmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDhtmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dhtmsg.proto", fileDescriptor_dhtmsg_b415edf7a3c082b7) }

var fileDescriptor_dhtmsg_b415edf7a3c082b7 = []byte{
	// 1158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0x7e, 0xf9, 0xe3, 0xd9, 0x49, 0xb7, 0xd3, 0x02, 0x23, 0x83, 0x82, 0x6b, 0x15, 0x35,
	0xea, 0x21, 0x82, 0x20, 0x2e, 0x05, 0x24, 0x5c, 0xef, 0x26, 0x59, 0x9a, 0xac, 0x97, 0xb1, 0x13,
	0xe8, 0x29, 0xda, 0x66, 0x87, 0xb5, 0x95, 0x64, 0xd7, 0xf1, 0x3a, 0x15, 0x39, 0x73, 0xe3, 0x88,
	0x38, 0x70, 0x45, 0xea, 0x1f, 0xc1, 0x0d, 0x21, 0x2e, 0x48, 0x5c, 0xf8, 0x13, 0x50, 0x90, 0xf8,
	0x0b, 0xb8, 0x83, 0x66, 0x76, 0xf6, 0xc3, 0xb1, 0xbd, 0x32, 0x42, 0x96, 0x7a, 0xf2, 0xbc, 0xe7,
	0xdf, 0xfb, 0x7e, 0xf3, 0xe6, 0x2d, 0xd4, 0xbd, 0xc1, 0xe4, 0x3c, 0xf2, 0xb7, 0x46, 0xe3, 0x70,
	0x12, 0xa2, 0x6a, 0x42, 0x3d, 0x6f, 0x5d, 0x02, 0x18, 0x83, 0x89, 0xe3, 0x9e, 0x9c, 0xba, 0x3e,
	0x45, 0x0f, 0x41, 0x71, 0x86, 0x1e, 0x96, 0x9a, 0xf2, 0xe6, 0xfa, 0xf6, 0x6b, 0x5b, 0x29, 0x6c,
	0xcb, 0x61, 0x72, 0x27, 0xe1, 0x99, 0xe5, 0x11, 0x86, 0x40, 0x0f, 0x60, 0xcd, 0x71, 0xaf, 0xce,
	0x42, 0xd7, 0xdb, 0xa7, 0x81, 0x3f, 0x19, 0x60, 0xb9, 0x29, 0x6f, 0xae, 0x91, 0x69, 0x26, 0xc2,
	0x50, 0x16, 0x0c, 0xac, 0x34, 0xa5, 0xcd, 0x3a, 0x49, 0xc8, 0xd6, 0x8f, 0x6f, 0x71, 0xbb, 0x07,
	0x34, 0x8a, 0x98, 0xdd, 0x0f, 0xa1, 0x7c, 0x1e, 0xf9, 0xfd, 0xab, 0x11, 0x15, 0xb6, 0xef, 0xe7,
	0x6c, 0x67, 0xb8, 0x2d, 0xf1, 0xcb, 0x80, 0x24, 0x91, 0x40, 0x1f, 0x43, 0x75, 0xe0, 0x06, 0x5e,
	0x34, 0x70, 0x4f, 0x29, 0x96, 0x9b, 0xd2, 0x66, 0x6d, 0xfb, 0xed, 0xf9, 0xe2, 0x7b, 0x09, 0x8c,
	0x64, 0x12, 0xe8, 0x31, 0x54, 0xbe, 0x1c, 0x06, 0x9e, 0x1d, 0x7a, 0x94, 0x7b, 0x59, 0xdb, 0xde,
	0x98, 0x2f, 0xbd, 0x23, 0x50, 0x24, 0xc5, 0x33, 0xd3, 0x01, 0x1d, 0xfa, 0x83, 0xe7, 0xe1, 0x38,
	0xc2, 0x6a, 0x91, 0x69, 0x3b, 0x81, 0x91, 0x4c, 0x82, 0x99, 0x1e, 0x5d, 0x4e, 0x8e, 0xdc, 0xb3,
	0x4b, 0x8a, 0xb5, 0x22, 0xd3, 0x8e, 0x40, 0x91, 0x14, 0x8f, 0x3a, 0x50, 0xf3, 0xa9, 0xe0, 0xd2,
	0x0b, 0x5c, 0xe2, 0xe2, 0x0b, 0xd2, 0xb6, 0x9b, 0x01, 0x49, 0x5e, 0x6a, 0x4a, 0x49, 0x34, 0xc2,
	0xe5, 0xa5, 0x94, 0x44, 0x23, 0x92, 0x97, 0x62, 0x4a, 0x46, 0x97, 0x13, 0x67, 0x1c, 0xbe, 0x18,
	0x7a, 0x74, 0x8c, 0x2b, 0x45, 0x4a, 0x9c, 0x0c, 0x48, 0xf2, 0x52, 0x68, 0x1f, 0xd6, 0x7d, 0x9a,
	0xfd, 0x47, 0x2f, 0x70, 0x95, 0xeb, 0x79, 0xb0, 0xd0, 0x99, 0x1c, 0x96, 0xdc, 0x90, 0xbd, 0xa9,
	0x2d, 0x1a, 0x61, 0x58, 0x56, 0x5b, 0x34, 0x22, 0x37, 0x64, 0xd1, 0x16, 0xa8, 0xa3, 0x61, 0xe0,
	0xe3, 0x1a, 0xd7, 0xd1, 0x58, 0x10, 0xd9, 0x30, 0xf0, 0x09, 0xc7, 0x71, 0x7c, 0x18, 0xf8, 0xb8,
	0x5e, 0x88, 0x0f, 0x39, 0x3e, 0x0c, 0xfc, 0xc6, 0x77, 0x12, 0xa8, 0xbc, 0x9d, 0xd6, 0x41, 0xb6,
	0x1c, 0x7e, 0x03, 0xea, 0x44, 0xb6, 0x1c, 0xa4, 0x83, 0x72, 0x68, 0x38, 0xe2, 0x6e, 0xb1, 0x23,
	0xe3, 0xf4, 0x3b, 0x0e, 0x56, 0x62, 0x4e, 0xbf, 0xe3, 0xa0, 0xd7, 0xa1, 0xc4, 0x64, 0x2d, 0x0f,
	0xab, 0x5c, 0x4e, 0x50, 0xe8, 0x13, 0xa8, 0x74, 0xc2, 0x20, 0xe0, 0x77, 0x4a, 0xe3, 0x77, 0x6a,
	0x41, 0xf0, 0x0c, 0x45, 0x4f, 0x26, 0xc3, 0x90, 0x63, 0x49, 0x2a, 0xd5, 0x68, 0x83, 0x16, 0xb7,
	0x9a, 0x0e, 0xca, 0x53, 0x7a, 0x25, 0xfc, 0x62, 0x47, 0xc6, 0x39, 0x72, 0xcf, 0xb8, 0x63, 0x75,
	0xc2, 0x8e, 0xe8, 0x1e, 0x68, 0xe6, 0x57, 0x93, 0xb1, 0x2b, 0x2e, 0x7a, 0x4c, 0x34, 0x3c, 0xa8,
	0xa4, 0x15, 0x9e, 0xd5, 0xf2, 0x2e, 0x68, 0xcc, 0xd9, 0x08, 0xcb, 0x4d, 0x65, 0x71, 0xa2, 0xf8,
	0x95, 0x8b, 0x81, 0x0b, 0xac, 0x98, 0xdc, 0x0a, 0x9f, 0x4f, 0xcb, 0x4f, 0x30, 0x16, 0x02, 0x1d,
	0xa7, 0x21, 0xd0, 0x71, 0xe3, 0x6b, 0x19, 0xaa, 0xe9, 0x84, 0x60, 0xb3, 0xab, 0x33, 0x70, 0x87,
	0x81, 0x15, 0x2b, 0x5b, 0x23, 0x09, 0xc9, 0x24, 0x8d, 0x61, 0x2c, 0xa9, 0x11, 0x76, 0xcc, 0xd5,
	0x40, 0x99, 0xaa, 0x41, 0x5c, 0x4f, 0xf5, 0x66, 0x3d, 0xb5, 0x99, 0x7a, 0x96, 0xb2, 0x7a, 0x36,
	0x44, 0x30, 0xf6, 0xe5, 0x39, 0x2e, 0x73, 0x76, 0x4a, 0xa3, 0x8f, 0xa0, 0x9a, 0x84, 0x11, 0xe1,
	0x0a, 0x4f, 0xda, 0xa2, 0x81, 0x21, 0x60, 0x24, 0x13, 0xe0, 0xde, 0x78, 0xb8, 0xda, 0x94, 0x37,
	0x55, 0x22, 0x5b, 0x5e, 0x96, 0x4c, 0xc8, 0x27, 0xf3, 0xa5, 0x04, 0x95, 0x64, 0xd2, 0xb1, 0x4e,
	0xde, 0x19, 0x87, 0xe7, 0x3c, 0x03, 0xc5, 0x05, 0xe2, 0x38, 0xf4, 0x08, 0xe4, 0x7e, 0xc8, 0x33,
	0x53, 0x8c, 0x96, 0xfb, 0x21, 0x4b, 0x5a, 0xdf, 0x1d, 0xfb, 0x74, 0x92, 0x24, 0x2d, 0xa6, 0x84,
	0x9b, 0xea, 0xac, 0x9b, 0x5a, 0xde, 0xcd, 0x9f, 0x24, 0xa8, 0xa6, 0x33, 0x75, 0xa5, 0x7e, 0xa6,
	0x5d, 0xaa, 0x2c, 0xdb, 0xa5, 0xcb, 0x45, 0xf0, 0xb3, 0x04, 0x95, 0x64, 0xae, 0xaf, 0x34, 0x80,
	0xf7, 0xa1, 0xc4, 0x8d, 0x24, 0x11, 0xbc, 0x39, 0x1f, 0x1f, 0xcf, 0x73, 0x01, 0x5d, 0x32, 0x86,
	0x1f, 0x24, 0xa8, 0xe5, 0x1e, 0x97, 0x95, 0x86, 0x21, 0xe6, 0x87, 0x92, 0xcd, 0x8f, 0xe5, 0x7c,
	0xfc, 0x3b, 0xef, 0x63, 0x3c, 0xcd, 0x57, 0xe6, 0xe3, 0x7b, 0x62, 0x64, 0x8a, 0x45, 0xa2, 0x30,
	0xd3, 0x62, 0xb8, 0xa6, 0xed, 0xa5, 0x16, 0xbd, 0x16, 0xb3, 0xed, 0xa5, 0xcd, 0x86, 0x5d, 0xca,
	0x87, 0xfd, 0x9b, 0x04, 0xb5, 0xdc, 0x6b, 0xbb, 0xd2, 0xb0, 0x1f, 0x67, 0x63, 0x9e, 0xd7, 0xa7,
	0x68, 0x2c, 0xc5, 0xaf, 0x6a, 0xf6, 0x2c, 0x2c, 0x57, 0xc4, 0x97, 0x12, 0xac, 0x4f, 0xbf, 0xf9,
	0xaf, 0x64, 0xaf, 0x7d, 0x2b, 0x4f, 0xbb, 0xb9, 0xe2, 0x76, 0xfb, 0x3f, 0x79, 0x17, 0x21, 0xaa,
	0x73, 0x9e, 0x63, 0xed, 0xbf, 0x0d, 0xba, 0xd2, 0x6c, 0x52, 0xca, 0xf9, 0xa4, 0x7c, 0x23, 0x81,
	0xea, 0x88, 0xbd, 0x68, 0x95, 0x15, 0xeb, 0xd1, 0x0b, 0x9e, 0x05, 0x95, 0xb0, 0x63, 0xe6, 0x8c,
	0x3a, 0xe3, 0x4c, 0xf8, 0x6a, 0x38, 0xd3, 0xfa, 0x4b, 0x82, 0x5a, 0xee, 0x93, 0x06, 0xdd, 0x81,
	0xb5, 0x03, 0xcb, 0x38, 0xde, 0x6b, 0xdb, 0x46, 0x6f, 0xaf, 0xfd, 0xd4, 0xd4, 0x6f, 0x21, 0x1d,
	0xea, 0x8c, 0xb5, 0x63, 0xd9, 0x86, 0xdd, 0x35, 0x4c, 0x5d, 0x4a, 0x40, 0xb6, 0x69, 0xed, 0xee,
	0x3d, 0xe9, 0x92, 0x9e, 0x2e, 0x27, 0x20, 0xe7, 0xb0, 0x7f, 0xd4, 0xde, 0x3f, 0x34, 0x75, 0x05,
	0xdd, 0x03, 0x9d, 0x71, 0x76, 0xcd, 0x98, 0x73, 0x4c, 0xcc, 0xcf, 0x74, 0x75, 0x96, 0xdb, 0x73,
	0x74, 0x0d, 0xdd, 0x85, 0xdb, 0x42, 0xda, 0x21, 0xdd, 0x23, 0xcb, 0x30, 0x89, 0x5e, 0x42, 0x6f,
	0xc0, 0x5d, 0x01, 0x4d, 0x98, 0x5c, 0x47, 0x79, 0xee, 0x1f, 0x3d, 0x47, 0xaf, 0xa0, 0x3a, 0x54,
	0xb8, 0x1a, 0xcb, 0xde, 0xd5, 0xab, 0x29, 0xd5, 0xb5, 0x77, 0x75, 0x68, 0x7d, 0x0a, 0xeb, 0xd3,
	0x6b, 0x26, 0xaa, 0x41, 0xb9, 0xd3, 0xb5, 0xfb, 0xc7, 0x76, 0x57, 0xbf, 0xc5, 0xc0, 0x9c, 0x78,
	0x66, 0xf6, 0x74, 0x29, 0xa5, 0x0e, 0xda, 0xcf, 0x74, 0x19, 0xdd, 0x86, 0x1a, 0xa7, 0x76, 0xda,
	0xd6, 0xbe, 0x69, 0xe8, 0x4a, 0xcb, 0x82, 0xaa, 0x31, 0x98, 0x10, 0x7a, 0x12, 0x8e, 0xf9, 0x2e,
	0x76, 0x9a, 0x2d, 0x95, 0xa7, 0xf4, 0x8a, 0x65, 0xfa, 0x05, 0x1f, 0xc1, 0xf1, 0x66, 0x17, 0x13,
	0xf3, 0x17, 0xc7, 0xd6, 0x2f, 0x32, 0xdc, 0x61, 0x5f, 0xbf, 0xe9, 0x54, 0x59, 0xa0, 0xb3, 0x03,
	0xd5, 0x91, 0xc0, 0x24, 0xcb, 0xea, 0x3b, 0xd3, 0x2d, 0x30, 0xad, 0x22, 0xbb, 0x6f, 0x99, 0xdc,
	0x82, 0xdd, 0x75, 0xb0, 0x82, 0xd5, 0x7f, 0xfe, 0x6c, 0xfa, 0x3c, 0xb7, 0x8b, 0x7f, 0x10, 0x5b,
	0x15, 0xcd, 0x7f, 0xbf, 0x30, 0x96, 0xf8, 0x0e, 0x70, 0x27, 0x53, 0xc5, 0x72, 0x4e, 0xf1, 0xa3,
	0x87, 0x00, 0xd9, 0x72, 0xcd, 0x0a, 0xeb, 0x58, 0xc6, 0xb1, 0xb1, 0xd7, 0xe7, 0x85, 0xe5, 0x84,
	0xf9, 0x45, 0x5f, 0xff, 0x47, 0x7a, 0xa2, 0xff, 0x7a, 0xbd, 0x21, 0xfd, 0x7e, 0xbd, 0x21, 0xfd,
	0x71, 0xbd, 0x21, 0x7d, 0xff, 0xe7, 0xc6, 0xad, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x13, 0x50,
	0x6c, 0xcf, 0x97, 0x10, 0x00, 0x00,
}

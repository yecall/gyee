/*
 *  Copyright (C) 2017 gyee authors
 *
 *  This file is part of the gyee library.
 *
 *  the gyee library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  the gyee library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the gyee library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


//
// The description about ycp2p Peer To Peer Protocol messages in protobuf
// specification.
//

syntax = "proto2";
package tcpmsg.pb;


//
// Protocol identities
//

enum ProtocolId {
    PID_P2P = 0;        // p2p internal
    PID_EXT = 0xff;     // external, for p2p users
}

//
// Message identities
//

enum MessageId {

    //
    // PID_P2P section
    //

    MID_HANDSHAKE   = 0;
    MID_PING        = 1;
    MID_PONG        = 2;

    //
    // PID_EXT section
    //

    MID_TX          = 3;
    MID_EVENT       = 4;
    MID_BLOCKHEADER = 5;
    MID_BLOCK       = 6;
    MID_CHKK        = 7;
    MID_RPTK        = 8;
    MID_GCD         = 9;
    MID_PCD         = 10;

    //
    // invalid MID
    //

    MID_INVALID     = -1;
}

//
// Key status
//

enum KeyStatus {
    KS_NOTEXIST = 0;
    KS_EXIST    = 1;
}

//
// The package for all messages
//

message P2PPackage {
    required ProtocolId Pid             = 1;    // protocol identity
    optional MessageId ExtMid           = 2;    // required for "Pid" whch is not PID_P2P
    optional bytes ExtKey               = 3;    // key of message packaged
    required uint32 PayloadLength       = 4;    // payload length
    optional bytes Payload              = 5;    // payload
}

//
// Internal p2p message
//

message P2PMessage {

    message Protocol {
        required ProtocolId Pid = 1;            // protocol identity
        required bytes      Ver = 2;            // protocol version: M.m0.m1.m2
    }

    message Handshake {
        required uint32     ChainId     = 1;    // chain identity
        required bytes      SubNetId    = 2;    // sub network identity
        required bytes      NodeId      = 3;    // node identity
        required bytes      IP          = 4;    // ip address
        required uint32     UDP         = 5;    // udp port number
        required uint32     TCP         = 6;    // tcp port number
        required uint32     ProtoNum    = 7;    // number of protocols
        repeated Protocol   Protocols   = 8;    // protocol table
        required int32      SignR       = 9;    // sign for r
        required bytes      R           = 10;    // r
        required int32      SignS       = 11;   // sign for s
        required bytes      S           = 12;   // s
        optional bytes      Extra       = 13;   // extra info, reserved
    }

    message Ping {
        required uint64     seq         = 1;    // sequence number
        optional bytes      Extra       = 2;    // extra info, reserved
    }

    message Pong {
        required uint64     seq         = 1;    // sequence number
        optional bytes      Extra       = 2;    // extra info, reserved
    }

    required MessageId      mid         = 1;    // message identity
    optional Handshake      handshake   = 2;    // handshake message
    optional Ping           ping        = 3;    // ping message
    optional Pong           pong        = 4;    // pong message
}

//
// External application message
//
message ExtMessage {
    message CheckKey {
        optional bytes      Extra       = 1;    // extra info, reserved
    }

    message ReportKey {
        required KeyStatus  Status      = 1;    // key status
        optional bytes      Extra       = 2;    // extra info, reserved
    }

    message GetChainData {
        required uint64     Seq         = 1;    // sequence number
        required bytes      Kind        = 2;    // kind
        required bytes      Key         = 3;    // key
    }

    message PutChainData {
        required uint64     Seq         = 1;    // sequence number
        required bytes      Kind        = 2;    // kind
        required bytes      Key         = 3;    // key
        required bytes      data        = 4;    // chain data
    }

    required MessageId      mid             = 1;    // message identity
    optional CheckKey       checkKey        = 2;    // check key message
    optional ReportKey      reportKey       = 3;    // report key message
    optional GetChainData   getChainData    = 4;    // get chain data
    optional PutChainData   putChainData    = 5;    // put chain data
}